;!function($) {

	if($.fn.ex) {
		$.error('jQuery.fn.ex was defined');
		return;
	}

	$.fn.ex = function() {
		var $this = this;
		return {
			empty: function() {
				return $this.length == 0;
			},

			size: function(p1, p2) {
				switch(arguments.length) {
					case 0: return [
								$this.width(), $this.height()
							];
					case 1: {
						$this.width(p1[0]); $this.height(p1[1]);
						return $this;
					}
					case 2: {
						$this.width(p1); $this.height(p2);
						return $this;
					}

				}
			}
		};
	};

	$('[data-action=goback]').on('click', function() {
		history.go(-1);
		return false;
	});

	$('[data-action=disabled]').on('click', function() {
		return false;
	});

	$('.modal[data-action=loading]').on('show.bs.modal', function() {
		$.maskLoading('setText', '加载中...').maskLoading('show');
	}).on('shown.bs.modal', function() {
		$.maskLoading('hide');
	});

}(window.jQuery);

;!function($) {

	var formSubmitOnIframeSupportor = function(form, callback) {

		var $form = $(form);
		
		$form.submit($.proxy(function() {

			var uid = '__FormSubmitOnIframe_' + new Date().getTime() + '_' + Math.floor(Math.random() * 99999999) + '__'
			  , $iframe = $("<iframe id='" + uid + "' src='about:blank' style='display:none;'></iframe>").appendTo('body');
			$form.attr('target', uid);

			// 当action跨域时，必须由远程服务器发起重定向请求至当前domain。
			// 否则跨域时无法取到iframe内的内容
			$iframe.load($.proxy(function(e) {
				try {
					callback(true, $iframe.contents().find('body').text());
				} catch(expt) {
					callback(false);
				} finally {
					$iframe.remove();
					delete $iframe;
					$form.removeAttr('target');
				}
			}, this));

		}, this));

	};

	var qiniuUploader = function(input, callback) {

		var $input = $(input);

		$.ajax({
		    type: "POST",
		    url: 'http://localhost:8080/qr_restaurant/User/PicUploaderGateway.do',
		    data: {}, // TODO: other data
		    //crossDomain: true, // TEST ONLY
		    success: function(token) {

				var $form = $(
					"<form method='post' action='http://up.qiniu.com' enctype='multipart/form-data' style='display:none'>" +
						"<input name='token' type='hidden' value='" + token + "' />" +
					"</form>").appendTo($('body'));
				
				// INPUT 控件无法设置值，而iframe提交后将重定向，控件不再存在
				// 固提交前复制一个包含空值的副本
				var $cloneInput = $input.clone(true);
				$input.hide();
				$input.after($cloneInput);
				$input.appendTo($form).attr('name', 'file');

				formSubmitOnIframeSupportor($form[0], function(status, result) {
					
					$form.remove();
					delete $form;

					if(status && (result = $.parseJSON(result))) {
						if(result['key']) {
							callback(true, result['key']);
						} else if(result['error']) {
							callback(false, result['error']);
						} else {
							callback(false);
						}
					} else {
						callback(false);
					}

				});

				$form.submit();
 		  	},
 		  	error: function(e) {
 		  		callback(false, e);
 		  	}
		});
	};


	($.fn.qiniuUploader) && $.error('$.fn.qiniuUploader was defined');

	$.fn.qiniuUploader = function(callback) {
		qiniuUploader(this, callback);
	}

}(window.jQuery);

;!function($) {

    var MaskLoading = function(element, options) {
        this.element = $(element);
        this.options = options;
        this.component = $(MaskLoading.template).hide().appendTo(this.element);
        this.setText();
        this.setImage();
    };

    MaskLoading.template = function() {
        return [
            "<div class='plugin plugin-maskloading-container'>",
                "<div class='plugin-maskloading'>",
                    "<img class='plugin-img' />",
                    "<span class='plugin-span' />",
                "</div>",
            "</div>"
        ].join('');
    }();

    MaskLoading.prototype = {

        setText: function(text) {
            this.component.find('.plugin-span').text(arguments.length ? text : this.options.text);
        },

        setImage: function(img) {
            this.component.find('.plugin-img').attr('src', arguments.length ? img : this.options.img);
        },

        show : function() {
            this.component.show();
        },

        hide: function() {
            //this.component.hide();
            this.component.fadeOut('fast');
        }

    };

    $.maskLoading && $.error('$.maskLoading was defined');

    $.maskLoading = function(action, param) {
        var REF_NAME = '__MASK_LOADING__'
          , $dom = $('body')
          , obj = $dom.data(REF_NAME);
        if(!obj) {
            obj = new MaskLoading($dom[0], $.maskLoading.defaults);
            $dom.data(REF_NAME, obj);
        }
        typeof action == 'string' && obj[action](param);
        return this;
    };

    $.maskLoading.defaults = {
        text : '加载中...',
        img : './../UserPublic/Img/loading.gif'
    };

}(window.jQuery);

;+function($) {

	$.fn.exValidate = function(options) {

        var $this = $(this);

        !$this.is('FORM') && $.error('must called on a form element');
        !$this.is('.module-exValidate') && $.error('must called on .module-exValidate');

        var $errorContainer = $('<div class="alert alert-warning fade in" style="display:none;"><button type="button" class="close" aria-hidden="true">×</button></div>')
            .prependTo($this);
        $errorContainer.find('button').on('click', function() {
                $(this).closest('.alert').hide();
            });

        var uuid = '_exValidate_' + new Date().getTime() + '_' + Math.floor(Math.random() * 999999) + '_';
        $this.addClass(uuid);

        $this.validate($.extend({
            errorContainer : '.' + uuid + ' > .alert',
            errorLabelContainer : '.' + uuid + ' > .alert',
            wrapper : "",
            ignore  : ""
        }, options));

        return this;
    };

}(window.jQuery);

;!function($) {
	
	if($('#page-login').ex().empty()) return;

	;$(function() {

		var $aVerifycode = $('.model-verifycode')
		  , $imgVerifycode = $aVerifycode.find('> img').first();
		
		var boxSize = $aVerifycode.closest('.input-group-btn').ex().size()
		  , imgSize = $imgVerifycode.ex().size()
		  , newSize = [imgSize[0] / imgSize[1] * boxSize[1], boxSize[1]];

		$imgVerifycode.ex().size(newSize);

		$aVerifycode.on('click', function(e) {
			$imgVerifycode.attr('src', $imgVerifycode.attr('src'));
			return false;
		});

		$('form').exValidate({
            rules : {
                username: { required : true },
                password : { required : true },
                verifycode : { required : true, rangelength : [4,4] }
            },
            messages : {
                username : '请输入用户名',
                password : '请输入密码',
                verifycode : { 
                    required : '请输入验证码',
                    rangelength : '请输入4位验证码'
                }
            },
        });

	});
	

}(window.jQuery);

;!function($) {

	if($('#page-table').ex().empty()) return;

	;$(function() {

		/**
		 * 动态修正餐桌名称过长带来的影响
		 */

		;!function() {
			var coreHeight = function($element) {
				return $element.innerHeight() - parseFloat($element.css('padding-top')) - parseFloat($element.css('padding-bottom'));
			};
			var resizeNameElement = function($element, $root, maxHeight) {
				// 1. 尽可能缩小字体
				var sourceFontsize = $element.css('font-size');
				do {
					$element.css('font-size', parseFloat(sourceFontsize) * 0.9 + 'px');
					var currentFontsize = $element.css('font-size');
					if(currentFontsize == sourceFontsize) {
						// browser(like chrome) force the minimum font-size value
						window.console && !console.log('can not set smaller font-size: ') && !console.log($element);
						break;
					}
					sourceFontsize = currentFontsize;
				} while(coreHeight($element) > maxHeight);
				// 2. 优化样式
				if(parseFloat(sourceFontsize) < 15) {
					$element.css('font-weight', 'normal').css('text-shadow', 'none')
						    .addClass('style-font-sans');
					$root.find('> .model-icon').hide();
					$root.find('> .model-status').hide();
				}
			};
			var moveMaskElement = function($root) { 
				$root.find('> .model-icon').css('left', 0).css('top', 0);
				$root.find('> .model-status').css('bottom', 0);
			};
			var CONST_OVERVIEW_HEIGHT = 110;
			var CONST_OFFSET_HEIGHT = 20;
			$('div.model.model-table-map > ul.model-list > li.model-item > a.model-module > span.model-name').each(function() {
				var $span = $(this)
				  , $a = $span.closest('a.model-module')
				  , span_coreHeight = coreHeight($span);
			  	if(span_coreHeight >= CONST_OVERVIEW_HEIGHT) {
			  		if(span_coreHeight - CONST_OVERVIEW_HEIGHT > CONST_OFFSET_HEIGHT) {
			  			resizeNameElement($span, $a, CONST_OVERVIEW_HEIGHT);
			  		}
			  		moveMaskElement($a);
			  	}
			});

		}();

	});

}(window.jQuery);

;!function($) {

	if($('#section-table-status-container').ex().empty()) return;
	
	;$(function() {

		/*
		 * 动态调整餐桌状态面板高度
		 */
		;!function() {
			$('#section-table-status-container').on('shown.bs.modal', function(e) {
				var $this = $(this)
				  , $panelGroup = $this.find('.model-container-main.panel-group').first()
				  , $panels = $panelGroup.find('.panel');
				if($panels.length <= 1) return;
				var marginHeight = 0
				  , borderHeight = 0
				  , headingHeight = 0;
				$panels.each(function() {
					var $panel = $(this);
					marginHeight += parseFloat($panel.css('margin-top')) + parseFloat($panel.css('margin-bottom'));
					borderHeight += parseFloat($panel.css('border-top-width')) + parseFloat($panel.css('border-bottom-width'));
					headingHeight = Math.max(headingHeight, $panel.find('.panel-heading').outerHeight());
				});
				var panelMaxHeightPx = ($panelGroup.innerHeight() - headingHeight * ($panels.length - 1) - marginHeight - borderHeight) + 'px';
				$panels.each(function() {
					$(this).css('max-height', panelMaxHeightPx);
				});
				$panels.find('.panel-collapse.collapse').on('shown.bs.collapse', function(e) {
					var $this = $(this)
					  , $panel = $this.closest('.panel')
					  , $panelHeading = $panel.find('.panel-heading');
					$this.height(parseFloat($panel.css('max-height')) - $panelHeading.height());
				});
			});
		}();
		

		/*
		 * 餐桌状态面板操作逻辑
		 */
		;!function() {
			$('#section-table-status-container').on('hidden.bs.modal', function(e) {
				$(this).removeData('bs.modal').html('');
			}).on('shown.bs.modal', function(e) {
				var $this = $(this)
				  , $panelGroup = $this.find('.model-container-main.panel-group').first()
				  , $panels = $panelGroup.find('.panel');
				$panels.find('.panel-heading a[data-toggle=collapse]').on('click', function(e) {
					var $this = $(this)
					  , $panel = $this.closest('.panel')
					  , $collapse = $panel.find('.panel-collapse');
					if($collapse.hasClass('in')) {
						var $nextPanel = $panel.next();
						if(!$nextPanel.length || !$nextPanel.hasClass('panel')) {
							$nextPanel = $panels.first();
						}
						if($nextPanel.length && $nextPanel.hasClass('panel')) {
							$nextPanel.find('.panel-heading a[data-toggle=collapse]').trigger('click');
							return false;
						}
					}
				});
				$panels.find('.panel-collapse.in').trigger('show.bs.collapse').trigger('shown.bs.collapse');
			});
		}();

	});

}(window.jQuery);

;!function($) {

	if($('#page-reservation').ex().empty()) return;

	var $model = $('.model.model-reservation');
	$model.find('.model-remarks').each(function() {
        var $this = $(this);
        var CONST_OVERFLOW = 18;
        if($this.text().length > CONST_OVERFLOW) {
            $this.popover({
                html : true,
                placement : 'left',
                title : '备注详情',
                content : $(this).html(),
                trigger : 'hover'
            });
            $this.css('cursor', 'help');
        }
    });

    $model.find('.model-table .model-no').each(function(i) {
        $(this).text(i + 1);
    }); 

}(window.jQuery);

;!function($) {

	if($('#section-reservation-editor-container').ex().empty()) return;

	$(function() {

		$('#section-reservation-editor-container').on('hidden.bs.modal', function(e) {
			$(this).removeData('bs.modal').html('');
		});

		$('#section-reservation-editor-container form').exValidate({
            
        });

	});

}(window.jQuery);

;!function($) {

	if($('#page-restaurant-editor').ex().empty()) return;

	;$(function() {

		$('form').exValidate({
			rules : { 
				name : { required : true },
				desc : { required : true },
				type : { required : true },
				addr : { required : true },
				tel : { required : true }
			},
			messages : {
				name : '请输入餐厅名称',
				desc : '请输入餐厅描述',
				type : '请选择主营菜品',
				addr : '请输入餐厅地址',
				tel : '请输入联系电话'

			}
		});
	});

}(window.jQuery);

;!function($) {

	if($('#page-table-list').ex().empty()) return;

	;$(function() {

		var $model = $('.model-table-list')
		  , $module = $model.find('.model-module');

		$module.find('.model-no').each(function(i) {
			$(this).text(i + 1);
		});

		$module.not('.model-module-free').find('.model-action a')
			.addClass('disabled').removeAttr('href')
			.attr('title', '不能在餐桌处于工作状态时操作')
			.on('click', function() { return false; });

	});

}(window.jQuery);

;!function($) {

	if($('#page-table-editor').ex().empty()) return;

	;$(function() {

		$('form').exValidate({
			rules : { 
				name : { required : true },
				type : { required : true },
				sort : { 
					required : true,
					digits : true,
					min : 0,
					max : 1024
			 	}
			},
			messages : {
				name : '请输入餐桌名称',
				type : '请输入餐桌类型',
				sort : '请输入正确的排序因子'

			}
		});
	});

}(window.jQuery);

;!function($) {

	if($('#page-dish-editor').ex().empty()) return;
    
	;$(function() {
        
		var $uploadView = $('.model-upload').first()
          , $uploadBtn = $uploadView.find('button').first()
          , $uploadFile = $uploadView.find('[type=file]').first()
          , $uploadValue = $uploadView.find('[type=hidden]').first()
          , $uploadPreview = $uploadView.find('img').first()
          , $form = $uploadView.closest('form');

        if(typeof FileReader == 'undefined') {
            $uploaderView.text('当前浏览器不支持HTML5的上传功能！');
            $uploadBtn.attr('disabled', 'disabled').click(function() { return false; });
            return;
        }

        $form.exValidate({
            rules : {
                name : { required : true },
                desc : { required : true },
                category : { required : true },
                price : { required : true, number : true, min : 0.001 },
                tag : { required : true }
            },
            messages : {
                name : '请输入菜品名称',
                desc : '请输入菜品描述',
                category : '请选择菜品类别',
                price  : '请输入菜品价格',
                tag : '请输入菜品标签'
            },
            submitHandler : function() {
                // 检查图片
                if(!$form.find('[name=pic]').val() && !$form.find('[type=file]').val()) {
                    alert('请选择菜品图片');
                    return false;
                }
                doSubmit0();
            }
        });

        

        var resetUploader = function() {
            $uploadFile.replaceWith($uploadFile = $uploadFile.clone(true));
            $uploadPreview.attr('src', '');
            $uploadValue.val('');
        };
        $uploadBtn.on('click', function() {
            $uploadFile.click();
        });
        $uploadFile.on('change', function(e) {
            if(this.files.length == 1) {
                var file = this.files[0];
                if(file.size > 2*1024*1024) {
                    alert('待上传文件不得大于2MB');
                    resetUploader();
                    return false;
                }
                var reader = new FileReader();
                reader.onload = function(e) {
                    var content = e.target.result;
                    if(!/data:image/i.test(content)) {
                        alert('只能够选择图片文件');
                        resetUploader();
                        return false;
                    }
                    $uploadValue.val('');
                    $uploadPreview.attr('src', content);
                };
                reader.readAsDataURL(file);
            } else {
                resetUploader();
            }
        });


        // 存在初始数据时初始化
        $uploadValue.val() && $uploadPreview.attr('src', $uploadValue.val());


        function doSubmit0() {
            // 验证表单
            // 在exValidate内完成验证并在验证通过时调用到这里
            // 转到doSubmit1
            doSubmit1();
        }
        function doSubmit1() {
            // 开始异步、UI
            $.maskLoading('setText', '提交中....').maskLoading('show');
            // 未上传图片、转到七牛上传图片
            if(!$uploadValue.val()) {
                $uploadFile.qiniuUploader(function(status, result) {
                    // qiniuUploader操作完后，重新关联$uploadFile
                    $uploadFile = $uploadView.find('[type=file]').first();
                    // 根据上传结果决定下一步操作
                    if(status) {
                        $uploadValue.val(result);
                        // 转到 doSubmit2
                        doSubmit2();
                    } else {
                        $uploadValue.val('');
                        alert('上传图片时发生错误');
                        // 停止上传
                        $.maskLoading('hide');
                    }
                    
                });
            } else {
                // 转到doSubmit2
                doSubmit2();
            }
        };
        function doSubmit2() {
            // 提交外部表单
            $.ajax({
                url : $form.attr('action'),
                type : $form.attr('method'),
                data : $form.serialize(),
                success : function(r) {
                    if(r['status']) {
                        alert(r['message']);
                        $.maskLoading('setText', '创建成功，跳转中...');
                        window.location=r['data'];
                    } else {
                        alert(r['message']);
                        $.maskLoading('hide');
                    }
                }, 
                error : function() {
                    alert('发生错误');
                    $.maskLoading('hide');
                }
            });
        }

	});

}(window.jQuery);

;!function($) {

	if($('#page-category-list').ex().empty()) return;

	;$(function() {

		var $model = $('.model-category-list')
		  , $module = $model.find('.model-module');

		$module.find('.model-no').each(function(i) {
			$(this).text(i + 1);
		});

	});

}(window.jQuery);

;!function($) {

	if($('#page-category-editor').ex().empty()) return;

	;$(function() {

		$('form').exValidate({
			rules : { 
				name : { required : true }
			},
			messages : {
				name : '请输入菜品分类名称'

			}
		});
	});

}(window.jQuery);

// @koala-prepend "fn.ex.js"
// @koala-prepend "plugin.qiniuUploader.js"
// @koala-prepend "plugin.maskLoading.js"
// @koala-prepend "plugin.exValidate.js"
// @koala-prepend "page-login.js"
// @koala-prepend "page-table.js"
// @koala-prepend "section-table-status.js"
// @koala-prepend "page-reservation.js"
// @koala-prepend "section-reservation-editor.js"
// @koala-prepend "page-restaurant-editor.js"
// @koala-prepend "page-table-list.js"
// @koala-prepend "page-table-editor.js"
// @koala-prepend "page-dish-editor.js"
// @koala-prepend "page-category-list.js"
// @koala-prepend "page-category-editor.js"

;!function($) {

	;$(function() {

		/**
		 * 为通知的bell标志赋予动画效果
		 */
		;!function() {
			var $root = $('.navbar-fixed-top .navbar-right > li:first > a:first')
			  , $icon = $root.find('> .glyphicon')
			  , $count = $root.find('> .badge');
			var intervalFunc = function() {
				if($count.is(':visible')) {
					$icon.css('color', '#e74c3c')
						 .fadeTo(200, 0.618, function() {
						 	$icon.fadeTo(400, 1);
						 });
				} else {
					$icon.css('color', '');
				}
			};                                                                                                                                                                      
			$icon.data('animateIntervalResult', setInterval(intervalFunc, 1300));
			intervalFunc();
		}();
		

	});

}(window.jQuery);